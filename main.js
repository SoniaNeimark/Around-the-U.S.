!function(){"use strict";class e{constructor(e,t,s){this._items=e,this._container=document.querySelector(s),this._renderer=t}renderItems(){this._items.reverse().forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}function t(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class s{constructor(e,s,r,o,i,a){t(this,"isOwner",(()=>this.cardObj.owner._id==this._myId)),t(this,"hasLike",(e=>e._id==this._myId)),t(this,"_checkLikes",(()=>this.cardObj.likes.length>0&&this.cardObj.likes.some((e=>this.hasLike(e))))),t(this,"getCardId",(()=>this.cardObj._id)),t(this,"updateLikes",(e=>{this.likesNumber.textContent=e.likes.length})),t(this,"deleteCard",(()=>{this._card.remove()})),t(this,"hasId",(()=>this._myId)),t(this,"isLiked",(()=>this._buttonLike.classList.contains(this._props.buttonLikeActiveClass))),t(this,"addLike",(()=>{this._buttonLike.classList.add(this._props.buttonLikeActiveClass)})),t(this,"removeLike",(()=>{this._buttonLike.classList.remove(this._props.buttonLikeActiveClass)})),this.cardObj=e,this._title=this.cardObj.name,this._url=this.cardObj.link,this._myId=s,this._props=r,this._handleCardClick=o,this._handleDelete=i,this._handleLike=a}_getTemplate(){return document.querySelector(this._props.cardTemplateSelector).content.querySelector(this._props.cardSelector).cloneNode(!0)}generateCard(){return this._card=this._getTemplate(),this._cardTitle=this._card.querySelector(this._props.cardTitleSelector),this._cardImage=this._card.querySelector(this._props.cardImageSelector),this._buttonDelete=this._card.querySelector(this._props.buttonDeleteSelector),this._buttonLike=this._card.querySelector(this._props.buttonLikeSelector),this.likesNumber=this._card.querySelector(this._props.cardLikesNumberSelector),this._cardTitle.textContent=this._title,this._cardImage.alt=this._title,this._cardImage.src=this._url,this.cardId=this.cardObj._id,this.updateLikes(this.cardObj),this._checkLikes()&&this.addLike(),this.isOwner()&&this._buttonDelete.classList.add(this._props.buttonDeleteActiveClass),this._setEventListeners(),this._card}_setEventListeners(){this._buttonDelete.addEventListener("click",this._handleDelete),this._buttonLike.addEventListener("click",this._handleLike),this._cardImage.addEventListener("click",this._handleCardClick)}}class r{constructor(e,t){this._formElement=document.querySelector(t),this._data=e,this._inputElements=Array.from(this._formElement.querySelectorAll(this._data.inputSelector)),this._buttonElement=this._formElement.querySelector(this._data.submitButtonSelector)}_showInputError(e){e.classList.add(this._data.inputErrorClass),this._errorText=this._formElement.querySelector("".concat(this._data.errorHiddenSelector,"_").concat(e.id)),this._errorText.textContent=e.validationMessage,this._errorText.classList.add(this._data.errorClass)}_hideInputError(e){e.classList.remove(this._data.inputErrorClass),this._errorText=this._formElement.querySelector("".concat(this._data.errorHiddenSelector,"_").concat(e.id)),this._errorText.textContent="",this._errorText.classList.remove(this._data.errorClass)}_checkIfInvalid(e){return!e.validity.valid}_hasInvalidInput(){return this._inputElements.some(this._checkIfInvalid)}_activateButton(){this._buttonElement.classList.remove(this._data.inactiveButtonClass),this._buttonElement.removeAttribute("disabled")}_deactivateButton(){this._buttonElement.classList.add(this._data.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)}_setButtonState(){this._hasInvalidInput()?this._deactivateButton():this._activateButton()}_checkInputValidity(e){this._checkIfInvalid(e)?this._showInputError(e):this._hideInputError(e)}validateForm(){this._setButtonState(),this._inputElements.forEach((e=>{this._checkInputValidity(e)}))}resetValidation(){this._deactivateButton(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._setButtonState()}))}))}}function o(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class i{constructor(e,t){o(this,"_handleEscClose",(e=>{"Escape"==e.key&&this.close()})),o(this,"_handleClickClose",(e=>{e.target!=this._popup&&e.target!=this._buttonClose||this.close()})),this._data=e,this._popup=document.querySelector(t),this._buttonClose=this._popup.querySelector(this._data.buttonCloseSelector)}open(){this._popup.classList.add(this._data.popupOpenClass),this.setEventListeners()}close(){this._popup.classList.remove(this._data.popupOpenClass),this.removeEventListeners()}setEventListeners(){this._popup.addEventListener("click",this._handleClickClose),document.addEventListener("keydown",this._handleEscClose)}removeEventListeners(){this._popup.removeEventListener("click",this._handleClickClose),document.removeEventListener("keydown",this._handleEscClose)}}class a extends i{constructor(e,t,s){super(e,t),this._form=this._popup.querySelector("form"),this.handleSubmit=s,this._inputElements=Array.from(this._popup.querySelectorAll(this._data.inputSelector))}getInputValues(){return this._formValues={},this._inputElements.forEach((e=>this._formValues[e.name]=e.value)),this._formValues}close(){super.close(),this._form.reset()}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",this.handleSubmit)}removeEventListeners(){super.removeEventListeners(),this._form.removeEventListener("submit",this.handleSubmit)}}document.getElementById("logo").src="4e8e0a1d604782a0dff8.svg";const n={buttonLikeSelector:".like-button",buttonDeleteSelector:".delete-button",buttonCloseSelector:".close-button",buttonLikeActiveClass:"like-button_status_active",buttonDeleteActiveClass:"delete-button_visible",popupSelector:".popup-box",popupSubtitleSelector:".popup-box__subtitle",popupImageImageSelector:".popup-box__image",popupOpenClass:"popup-box_opened",cardsGallerySelector:".elements__cards",cardTemplateSelector:"#elements__card",cardSelector:".elements__card",cardImageSelector:".elements__image",cardTitleSelector:".elements__title",cardLikesNumberSelector:".elements__like-number",userNameSetSelector:".profile__name",userJobSetSelector:".profile__profession",profileImageSelector:".profile__image",buttonEditProfileSelector:".edit-button",buttonAddCardSelector:".add-button",avatarEditButtonSelector:".avatar-edit-button",buttonSubmitAlertSelector:".popup-box__button_alert",profileEditSubmitButtonSelector:".popup-box__button_edit-profile",addCardSubmitButtonSelector:".popup-box__button_add-card",avatarEditSubmitButtonSelector:".popup-box__button_edit-avatar",popupEditProfileSelector:".popup-box_edit-profile",popupEditAvatarSelector:".popup-box_edit-avatar",popupAddCardSelector:".popup-box_add-card",popupImageSelector:".popup-box_image",popupAlertSelector:".popup-box_alert",userNameToSetSelector:".popup-box__input_type_name",userJobToSetSelector:".popup-box__input_type_job",userAvatarToSetSelector:".popup-box__input_type_avatarUrl",formSelector:".popup-box__form",inputSelector:".popup-box__input",submitButtonSelector:".popup-box__button",errorHiddenSelector:".popup-box__error",inactiveButtonClass:"popup-box__button_disabled",inputErrorClass:"popup-box__input_type_error",errorClass:"popup-box__error_visible"},l=document.querySelector(n.buttonEditProfileSelector),c=document.querySelector(n.buttonAddCardSelector),d=document.querySelector(n.avatarEditButtonSelector),h=document.querySelector(n.userNameToSetSelector),u=document.querySelector(n.userJobToSetSelector),p=document.querySelector(n.profileEditSubmitButtonSelector),_=document.querySelector(n.avatarEditSubmitButtonSelector),m=document.querySelector(n.addCardSubmitButtonSelector),b=new class{constructor(e){this._data=e,this._name=document.querySelector(this._data.userNameSetSelector),this._about=document.querySelector(this._data.userJobSetSelector),this._avatar=document.querySelector(this._data.profileImageSelector)}getUserInfo(){return this._info={},this._info.name=this._name.textContent,this._info.about=this._about.textContent,this._info}setUserInfo(e){let{name:t,about:s,avatar:r}=e;this._name.textContent=t,this._about.textContent=s,this._avatar.style.backgroundImage="url(".concat(r,")")}}(n),S=new class{constructor(e){this._options=e,this._baseUrl=this._options.baseUrl,this._headers=this._options.headers}_checkResponse(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}getUserData(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._checkResponse)}getData(){return Promise.all([this.getUserData(),this.getInitialCards()]).then((e=>e))}editProfile(e){let{name:t,about:s}=e;return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._checkResponse)}editAvatar(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}addCard(e){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}addLike(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(this._checkResponse)}deleteLike(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"8e9e95f1-162a-4424-a2c2-34e39da75ee9","Content-Type":"application/json"}}),v=new r(n,n.popupAddCardSelector);v.enableValidation();const k=new r(n,n.popupEditProfileSelector);k.enableValidation();const E=new r(n,n.popupEditAvatarSelector);E.enableValidation(),S.getData().then((t=>{let[s,r]=t;b.setUserInfo(s);const o=new e(r,(e=>{o.addItem(C(e,s._id))}),n.cardsGallerySelector);o.renderItems(r);const i=new a(n,n.popupAddCardSelector,(e=>{e.preventDefault(),I(!0,m);const t=i.getInputValues(),r={name:t.title,link:t.url,owner:{_id:s._id},likes:[]};S.addCard(r).then((e=>{o.addItem(C(e,s._id))})).then((()=>{i.close()})).catch((e=>console.log(e))).finally((()=>{I(!1,m,"Create")}))}));i.setEventListeners(),c.addEventListener("click",(()=>{i.open(),v.resetValidation()}))})).catch((e=>console.log(e)));const f=new class extends i{constructor(e,t,s){super(e,t),this._subtitle=this._popup.querySelector(this._data.popupSubtitleSelector),this._image=this._popup.querySelector(this._data.popupImageImageSelector),this.cardObj=s}open(){this._subtitle.textContent=this.cardObj.name,this._image.alt=this.cardObj.name,this._image.src=this.cardObj.link,super.open()}}(n,n.popupImageSelector),L=new a(n,n.popupAlertSelector),C=(e,t)=>{const r=new s(e,t,n,(()=>{f.cardObj=e,f.open()}),(()=>{r.isOwner()&&(L.handleSubmit=e=>{e.preventDefault(),S.deleteCard(r.getCardId()).then((()=>{r.deleteCard()})).then((()=>{L.close()})).catch((e=>console.log(e)))},L.open())}),(()=>{r.isLiked()?S.deleteLike(r.getCardId()).then((e=>{r.removeLike(),r.updateLikes(e)})).catch((e=>console.log(e))):S.addLike(r.getCardId()).then((e=>{r.addLike(),r.updateLikes(e)})).catch((e=>console.log(e)))}));return r.generateCard()},g=new a(n,n.popupEditProfileSelector,(e=>{e.preventDefault(),I(!0,p);const{name:t,about:s}=g.getInputValues();S.editProfile({name:t,about:s}).then((e=>{b.setUserInfo(e)})).then((()=>g.close())).catch((e=>console.log(e))).finally((()=>I(!1,p,"Save")))}));g.setEventListeners(),l.addEventListener("click",(()=>{g.open();const{name:e,about:t}=b.getUserInfo();h.value=e,u.value=t,k.validateForm()}));const y=new a(n,n.popupEditAvatarSelector,(e=>{e.preventDefault(),I(!0,_);const t=y.getInputValues();S.editAvatar(t.avatarUrl).then((e=>{b.setUserInfo(e)})).then((()=>{y.close()})).catch((e=>console.log(e))).finally((()=>I(!1,_,"Save")))}));d.addEventListener("click",(()=>{y.open(),E.resetValidation()}));const I=(e,t,s)=>{t.textContent=e?"Saving...":s}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,