!function(){"use strict";class e{constructor(e,t,s){this._items=e,this._container=document.querySelector(s),this._renderer=t}renderItems(){this._items.reverse().forEach((e=>{this._renderer(e)}))}addItem(e){e.onload=this._container.prepend(e)}}function t(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class s{constructor(e,s,o,r,i,a){t(this,"deleteCard",(()=>{this._card.remove()})),t(this,"chekIfLiked",(()=>this._likes.some(this.hasId))),t(this,"addLike",(()=>{this._buttonLike.classList.add(this._props.buttonLikeActiveClass)})),t(this,"removeLike",(()=>{this._buttonLike.classList.remove(this._props.buttonLikeActiveClass)})),this._cardObj=e,this._title=this._cardObj.name,this._url=this._cardObj.link,this._myId=s,this._props=o,this._handleCardClick=r,this._handleDelete=i,this._handleLike=a}_getTemplate(){return document.querySelector(this._props.cardTemplateSelector).content.querySelector(this._props.cardSelector).cloneNode(!0)}generateCard(){return this._card=this._getTemplate(),this._cardTitle=this._card.querySelector(this._props.cardTitleSelector),this._cardImage=this._card.querySelector(this._props.cardImageSelector),this._buttonDelete=this._card.querySelector(this._props.buttonDeleteSelector),this._buttonLike=this._card.querySelector(this._props.buttonLikeSelector),this._likesNumber=this._card.querySelector(this._props.cardLikesNumberSelector),this._cardObj.likes.some((e=>e._id==this._myId))&&this._buttonLike.classList.add(this._props.buttonLikeActiveClass),this._cardTitle.textContent=this._title,this._cardImage.alt=this._title,this._cardImage.src=this._url,this._likesNumber.textContent=this._cardObj.likes.length,this._cardObj.owner._id==this._myId&&this._buttonDelete.classList.add(this._props.buttonDeleteActiveClass),this._setEventListeners(),this._card}_setEventListeners(){this._buttonDelete.addEventListener("click",this._handleDelete),this._buttonLike.addEventListener("click",this._handleLike),this._cardImage.addEventListener("click",this._handleCardClick)}}class o{constructor(e,t){this._formElement=document.querySelector(t),this._data=e,this._inputElements=Array.from(this._formElement.querySelectorAll(this._data.inputSelector)),this._buttonElement=this._formElement.querySelector(this._data.submitButtonSelector)}_showInputError(e){e.classList.add(this._data.inputErrorClass),this._errorText=this._formElement.querySelector("".concat(this._data.errorHiddenSelector,"_").concat(e.id)),this._errorText.textContent=e.validationMessage,this._errorText.classList.add(this._data.errorClass)}_hideInputError(e){e.classList.remove(this._data.inputErrorClass),this._errorText=this._formElement.querySelector("".concat(this._data.errorHiddenSelector,"_").concat(e.id)),this._errorText.textContent="",this._errorText.classList.remove(this._data.errorClass)}_checkIfInvalid(e){return!e.validity.valid}_hasInvalidInput(){return this._inputElements.some(this._checkIfInvalid)}_activateButton(){this._buttonElement.classList.remove(this._data.inactiveButtonClass),this._buttonElement.removeAttribute("disabled")}_deactivateButton(){this._buttonElement.classList.add(this._data.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)}_setButtonState(){this._hasInvalidInput()?this._deactivateButton():this._activateButton()}_checkInputValidity(e){this._checkIfInvalid(e)?this._showInputError(e):this._hideInputError(e)}validateForm(){this._setButtonState(),this._inputElements.forEach((e=>{this._checkInputValidity(e)}))}resetValidation(){this._deactivateButton(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._setButtonState()}))}))}}function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class i{constructor(e,t){r(this,"_handleEscClose",(e=>{"Escape"==e.key&&this.close()})),r(this,"_handleClickClose",(e=>{e.target!=this._popup&&e.target!=this._buttonClose||this.close()})),this._data=e,this._popup=document.querySelector(t),this._buttonClose=this._popup.querySelector(this._data.buttonCloseSelector)}open(){this._popup.classList.add(this._data.popupOpenClass),this.setEventListeners()}close(){this._popup.classList.remove(this._data.popupOpenClass),this.removeEventListeners()}setEventListeners(){this._popup.addEventListener("click",this._handleClickClose),document.addEventListener("keydown",this._handleEscClose)}removeEventListeners(){this._popup.removeEventListener("click",this._handleClickClose),document.removeEventListener("keydown",this._handleEscClose)}}class a extends i{constructor(e,t,s){super(e,t),this._form=this._popup.querySelector("form"),this._handleSubmit=s,this._inputElements=Array.from(this._popup.querySelectorAll(this._data.inputSelector))}getInputValues(){return this._formValues={},this._inputElements.forEach((e=>this._formValues[e.name]=e.value)),this._formValues}close(){super.close(),this._form.reset()}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",this._handleSubmit)}removeEventListeners(){super.removeEventListeners(),this._form.removeEventListener("submit",this._handleSubmit)}}document.getElementById("logo").src="4e8e0a1d604782a0dff8.svg";const n=document.getElementById("profile"),l={buttonLikeSelector:".like-button",buttonDeleteSelector:".delete-button",buttonCloseSelector:".close-button",buttonLikeActiveClass:"like-button_status_active",buttonDeleteActiveClass:"delete-button_visible",popupSelector:".popup-box",popupSubtitleSelector:".popup-box__subtitle",popupImageImageSelector:".popup-box__image",popupOpenClass:"popup-box_opened",cardsGallerySelector:".elements__cards",cardTemplateSelector:"#elements__card",cardSelector:".elements__card",cardImageSelector:".elements__image",cardTitleSelector:".elements__title",cardLikesNumberSelector:".elements__like-number",userNameSetSelector:".profile__name",userJobSetSelector:".profile__profession",buttonEditProfileSelector:".edit-button",buttonAddCardSelector:".add-button",avatarEditButtonSelector:".avatar-edit-button",buttonSubmitAlertSelector:".popup-box__button_alert",profileEditSubmitButtonSelector:".popup-box__button_edit-profile",addCardSubmitButtonSelector:".popup-box__button_add-card",popupEditProfileSelector:".popup-box_edit-profile",popupEditAvatarSelector:".popup-box_edit-avatar",popupAddCardSelector:".popup-box_add-card",popupImageSelector:".popup-box_image",popupAlertSelector:".popup-box_alert",userNameToSetSelector:".popup-box__input_type_name",userJobToSetSelector:".popup-box__input_type_job",userAvatarToSetSelector:".popup-box__input_type_avatarUrl",formSelector:".popup-box__form",inputSelector:".popup-box__input",submitButtonSelector:".popup-box__button",errorHiddenSelector:".popup-box__error",inactiveButtonClass:"popup-box__button_disabled",inputErrorClass:"popup-box__input_type_error",errorClass:"popup-box__error_visible"},c=document.querySelector(l.buttonEditProfileSelector),u=document.querySelector(l.buttonAddCardSelector),d=document.querySelector(l.avatarEditButtonSelector),h=document.querySelector(l.userNameToSetSelector),_=document.querySelector(l.userJobToSetSelector),p=document.querySelector(l.userAvatarToSetSelector),m=document.querySelector(l.profileEditSubmitButtonSelector),b=document.querySelector(l.addCardSubmitButtonSelector),S=new class{constructor(e){this._data=e,this._name=document.querySelector(this._data.userNameSetSelector),this._job=document.querySelector(this._data.userJobSetSelector)}getUserInfo(){return this._info={},this._info.name=this._name.textContent,this._info.job=this._job.textContent,this._info}setUserInfo(e){let{nameInfo:t,jobInfo:s}=e;this._name.textContent=t,this._job.textContent=s}}(l),v=new class{constructor(e){this._options=e,this._baseUrl=this._options.baseUrl,this._headers=this._options.headers}getUserData(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).catch((e=>{console.log(e)}))}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).catch((e=>{console.log(e)}))}getData(){return Promise.all([this.getUserData(),this.getInitialCards()]).then((e=>e)).catch((e=>{console.log(e)}))}editProfile(e){let{name:t,about:s}=e;return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>console.log(e)))}editAvatar(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>console.log(e)))}addCard(e){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>console.log(e)))}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>console.log(e)))}addLike(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>console.log(e)))}deleteLike(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>console.log(e)))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"8e9e95f1-162a-4424-a2c2-34e39da75ee9","Content-Type":"application/json"}}),f=new o(l,l.popupAddCardSelector);f.enableValidation();const k=new o(l,l.popupEditProfileSelector);k.enableValidation();const E=new o(l,l.popupEditAvatarSelector);E.enableValidation(),v.getData().then((t=>{S.setUserInfo({nameInfo:t[0].name,jobInfo:t[0].about}),n.style.backgroundImage="url(".concat(t[0].avatar,")");const s=new e(t[1],(e=>{s.addItem(g(e,t[0]._id))}),l.cardsGallerySelector);s.renderItems(t[1]);const o=new a(l,l.popupAddCardSelector,(e=>{e.preventDefault(),x(!0,b);const r=o.getInputValues(),i={name:r.title,link:r.url,owner:{_id:t[0]._id},likes:[]};v.addCard(i).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>{e&&console.log(e)})).finally((()=>v.getData().then((e=>{s.addItem(g(e[1][0],e[0]._id)),o.close(),x(!1,b,"Create")}))))}));o.setEventListeners(),u.addEventListener("click",(()=>{o.open(),f.resetValidation()}))}));const C=new class extends i{constructor(e,t){super(e,t),this._subtitle=this._popup.querySelector(this._data.popupSubtitleSelector),this._image=this._popup.querySelector(this._data.popupImageImageSelector)}open(e){this._subtitle.textContent=e.alt,this._image.alt=e.alt,this._image.src=e.src,super.open()}}(l,l.popupImageSelector),L=new a(l,l.popupAlertSelector),g=(e,t)=>{const o=new s(e,t,l,(()=>{C.open(o._cardImage)}),(()=>{o._buttonDelete.classList.contains(l.buttonDeleteActiveClass)&&(L._handleSubmit=e=>{e.preventDefault(),v.deleteCard(o._cardObj._id),o.deleteCard(),L.close()},L.open())}),(()=>{o._buttonLike.classList.contains(l.buttonLikeActiveClass)?(v.deleteLike(o._cardObj._id).then((e=>e)).then((e=>o._likesNumber.textContent=e.likes.length)),o._buttonLike.classList.remove(l.buttonLikeActiveClass)):(v.addLike(o._cardObj._id).then((e=>e)).then((e=>o._likesNumber.textContent=e.likes.length)),o._buttonLike.classList.add(l.buttonLikeActiveClass))}));return o.generateCard()},y=new a(l,l.popupEditProfileSelector,(e=>{e.preventDefault(),x(!0,m);const{name:t,about:s}=y.getInputValues();v.editProfile({name:t,about:s}).then((e=>(e.ok&&e.json(),Promise.reject(e.statusText)))).catch((e=>{e&&console.log(e)})).finally((()=>{S.setUserInfo({nameInfo:t,jobInfo:s}),x(!1,m,"Save"),y.close()}))}));y.setEventListeners(),c.addEventListener("click",(()=>{y.open();const{name:e,job:t}=S.getUserInfo();h.value=e,_.value=t,k.validateForm()}));const I=new a(l,l.popupEditAvatarSelector,(e=>{e.preventDefault();const t=I.getInputValues();v.editAvatar(t.avatarUrl),n.style.backgroundImage="url(".concat(t.avatarUrl,")"),I.close()}));d.addEventListener("click",(()=>{I.open(),p.value=n.style.backgroundImage.slice(5,-2),E.validateForm()}));const x=(e,t,s)=>{t.textContent=e?"Saving":s}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,